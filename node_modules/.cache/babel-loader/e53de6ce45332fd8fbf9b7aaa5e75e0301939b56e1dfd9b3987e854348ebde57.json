{"ast":null,"code":"var Wheel = require(\"./uniwheel\"),\n  ControlIcons = require(\"./control-icons\"),\n  Utils = require(\"./utilities\"),\n  SvgUtils = require(\"./svg-utilities\"),\n  ShadowViewport = require(\"./shadow-viewport\");\nvar SvgPanZoom = function (svg, options) {\n  this.init(svg, options);\n};\nvar optionsDefaults = {\n  viewportSelector: \".svg-pan-zoom_viewport\",\n  // Viewport selector. Can be querySelector string or SVGElement\n  panEnabled: true,\n  // enable or disable panning (default enabled)\n  controlIconsEnabled: false,\n  // insert icons to give user an option in addition to mouse events to control pan/zoom (default disabled)\n  zoomEnabled: true,\n  // enable or disable zooming (default enabled)\n  dblClickZoomEnabled: true,\n  // enable or disable zooming by double clicking (default enabled)\n  mouseWheelZoomEnabled: true,\n  // enable or disable zooming by mouse wheel (default enabled)\n  preventMouseEventsDefault: true,\n  // enable or disable preventDefault for mouse events\n  zoomScaleSensitivity: 0.1,\n  // Zoom sensitivity\n  minZoom: 0.5,\n  // Minimum Zoom level\n  maxZoom: 10,\n  // Maximum Zoom level\n  fit: true,\n  // enable or disable viewport fit in SVG (default true)\n  contain: false,\n  // enable or disable viewport contain the svg (default false)\n  center: true,\n  // enable or disable viewport centering in SVG (default true)\n  refreshRate: \"auto\",\n  // Maximum number of frames per second (altering SVG's viewport)\n  beforeZoom: null,\n  onZoom: null,\n  beforePan: null,\n  onPan: null,\n  customEventsHandler: null,\n  eventsListenerElement: null,\n  onUpdatedCTM: null\n};\nvar passiveListenerOption = {\n  passive: true\n};\nSvgPanZoom.prototype.init = function (svg, options) {\n  var that = this;\n  this.svg = svg;\n  this.defs = svg.querySelector(\"defs\");\n\n  // Add default attributes to SVG\n  SvgUtils.setupSvgAttributes(this.svg);\n\n  // Set options\n  this.options = Utils.extend(Utils.extend({}, optionsDefaults), options);\n\n  // Set default state\n  this.state = \"none\";\n\n  // Get dimensions\n  var boundingClientRectNormalized = SvgUtils.getBoundingClientRectNormalized(svg);\n  this.width = boundingClientRectNormalized.width;\n  this.height = boundingClientRectNormalized.height;\n\n  // Init shadow viewport\n  this.viewport = ShadowViewport(SvgUtils.getOrCreateViewport(this.svg, this.options.viewportSelector), {\n    svg: this.svg,\n    width: this.width,\n    height: this.height,\n    fit: this.options.fit,\n    contain: this.options.contain,\n    center: this.options.center,\n    refreshRate: this.options.refreshRate,\n    // Put callbacks into functions as they can change through time\n    beforeZoom: function (oldScale, newScale) {\n      if (that.viewport && that.options.beforeZoom) {\n        return that.options.beforeZoom(oldScale, newScale);\n      }\n    },\n    onZoom: function (scale) {\n      if (that.viewport && that.options.onZoom) {\n        return that.options.onZoom(scale);\n      }\n    },\n    beforePan: function (oldPoint, newPoint) {\n      if (that.viewport && that.options.beforePan) {\n        return that.options.beforePan(oldPoint, newPoint);\n      }\n    },\n    onPan: function (point) {\n      if (that.viewport && that.options.onPan) {\n        return that.options.onPan(point);\n      }\n    },\n    onUpdatedCTM: function (ctm) {\n      if (that.viewport && that.options.onUpdatedCTM) {\n        return that.options.onUpdatedCTM(ctm);\n      }\n    }\n  });\n\n  // Wrap callbacks into public API context\n  var publicInstance = this.getPublicInstance();\n  publicInstance.setBeforeZoom(this.options.beforeZoom);\n  publicInstance.setOnZoom(this.options.onZoom);\n  publicInstance.setBeforePan(this.options.beforePan);\n  publicInstance.setOnPan(this.options.onPan);\n  publicInstance.setOnUpdatedCTM(this.options.onUpdatedCTM);\n  if (this.options.controlIconsEnabled) {\n    ControlIcons.enable(this);\n  }\n\n  // Init events handlers\n  this.lastMouseWheelEventTime = Date.now();\n  this.setupHandlers();\n};\n\n/**\n * Register event handlers\n */\nSvgPanZoom.prototype.setupHandlers = function () {\n  var that = this,\n    prevEvt = null; // use for touchstart event to detect double tap\n\n  this.eventListeners = {\n    // Mouse down group\n    mousedown: function (evt) {\n      var result = that.handleMouseDown(evt, prevEvt);\n      prevEvt = evt;\n      return result;\n    },\n    touchstart: function (evt) {\n      var result = that.handleMouseDown(evt, prevEvt);\n      prevEvt = evt;\n      return result;\n    },\n    // Mouse up group\n    mouseup: function (evt) {\n      return that.handleMouseUp(evt);\n    },\n    touchend: function (evt) {\n      return that.handleMouseUp(evt);\n    },\n    // Mouse move group\n    mousemove: function (evt) {\n      return that.handleMouseMove(evt);\n    },\n    touchmove: function (evt) {\n      return that.handleMouseMove(evt);\n    },\n    // Mouse leave group\n    mouseleave: function (evt) {\n      return that.handleMouseUp(evt);\n    },\n    touchleave: function (evt) {\n      return that.handleMouseUp(evt);\n    },\n    touchcancel: function (evt) {\n      return that.handleMouseUp(evt);\n    }\n  };\n\n  // Init custom events handler if available\n  // eslint-disable-next-line eqeqeq\n  if (this.options.customEventsHandler != null) {\n    this.options.customEventsHandler.init({\n      svgElement: this.svg,\n      eventsListenerElement: this.options.eventsListenerElement,\n      instance: this.getPublicInstance()\n    });\n\n    // Custom event handler may halt builtin listeners\n    var haltEventListeners = this.options.customEventsHandler.haltEventListeners;\n    if (haltEventListeners && haltEventListeners.length) {\n      for (var i = haltEventListeners.length - 1; i >= 0; i--) {\n        if (this.eventListeners.hasOwnProperty(haltEventListeners[i])) {\n          delete this.eventListeners[haltEventListeners[i]];\n        }\n      }\n    }\n  }\n\n  // Bind eventListeners\n  for (var event in this.eventListeners) {\n    // Attach event to eventsListenerElement or SVG if not available\n    (this.options.eventsListenerElement || this.svg).addEventListener(event, this.eventListeners[event], !this.options.preventMouseEventsDefault ? passiveListenerOption : false);\n  }\n\n  // Zoom using mouse wheel\n  if (this.options.mouseWheelZoomEnabled) {\n    this.options.mouseWheelZoomEnabled = false; // set to false as enable will set it back to true\n    this.enableMouseWheelZoom();\n  }\n};\n\n/**\n * Enable ability to zoom using mouse wheel\n */\nSvgPanZoom.prototype.enableMouseWheelZoom = function () {\n  if (!this.options.mouseWheelZoomEnabled) {\n    var that = this;\n\n    // Mouse wheel listener\n    this.wheelListener = function (evt) {\n      return that.handleMouseWheel(evt);\n    };\n\n    // Bind wheelListener\n    var isPassiveListener = !this.options.preventMouseEventsDefault;\n    Wheel.on(this.options.eventsListenerElement || this.svg, this.wheelListener, isPassiveListener);\n    this.options.mouseWheelZoomEnabled = true;\n  }\n};\n\n/**\n * Disable ability to zoom using mouse wheel\n */\nSvgPanZoom.prototype.disableMouseWheelZoom = function () {\n  if (this.options.mouseWheelZoomEnabled) {\n    var isPassiveListener = !this.options.preventMouseEventsDefault;\n    Wheel.off(this.options.eventsListenerElement || this.svg, this.wheelListener, isPassiveListener);\n    this.options.mouseWheelZoomEnabled = false;\n  }\n};\n\n/**\n * Handle mouse wheel event\n *\n * @param  {Event} evt\n */\nSvgPanZoom.prototype.handleMouseWheel = function (evt) {\n  if (!this.options.zoomEnabled || this.state !== \"none\") {\n    return;\n  }\n  if (this.options.preventMouseEventsDefault) {\n    if (evt.preventDefault) {\n      evt.preventDefault();\n    } else {\n      evt.returnValue = false;\n    }\n  }\n\n  // Default delta in case that deltaY is not available\n  var delta = evt.deltaY || 1,\n    timeDelta = Date.now() - this.lastMouseWheelEventTime,\n    divider = 3 + Math.max(0, 30 - timeDelta);\n\n  // Update cache\n  this.lastMouseWheelEventTime = Date.now();\n\n  // Make empirical adjustments for browsers that give deltaY in pixels (deltaMode=0)\n  if (\"deltaMode\" in evt && evt.deltaMode === 0 && evt.wheelDelta) {\n    delta = evt.deltaY === 0 ? 0 : Math.abs(evt.wheelDelta) / evt.deltaY;\n  }\n  delta = -0.3 < delta && delta < 0.3 ? delta : (delta > 0 ? 1 : -1) * Math.log(Math.abs(delta) + 10) / divider;\n  var inversedScreenCTM = this.svg.getScreenCTM().inverse(),\n    relativeMousePoint = SvgUtils.getEventPoint(evt, this.svg).matrixTransform(inversedScreenCTM),\n    zoom = Math.pow(1 + this.options.zoomScaleSensitivity, -1 * delta); // multiplying by neg. 1 so as to make zoom in/out behavior match Google maps behavior\n\n  this.zoomAtPoint(zoom, relativeMousePoint);\n};\n\n/**\n * Zoom in at a SVG point\n *\n * @param  {SVGPoint} point\n * @param  {Float} zoomScale    Number representing how much to zoom\n * @param  {Boolean} zoomAbsolute Default false. If true, zoomScale is treated as an absolute value.\n *                                Otherwise, zoomScale is treated as a multiplied (e.g. 1.10 would zoom in 10%)\n */\nSvgPanZoom.prototype.zoomAtPoint = function (zoomScale, point, zoomAbsolute) {\n  var originalState = this.viewport.getOriginalState();\n  if (!zoomAbsolute) {\n    // Fit zoomScale in set bounds\n    if (this.getZoom() * zoomScale < this.options.minZoom * originalState.zoom) {\n      zoomScale = this.options.minZoom * originalState.zoom / this.getZoom();\n    } else if (this.getZoom() * zoomScale > this.options.maxZoom * originalState.zoom) {\n      zoomScale = this.options.maxZoom * originalState.zoom / this.getZoom();\n    }\n  } else {\n    // Fit zoomScale in set bounds\n    zoomScale = Math.max(this.options.minZoom * originalState.zoom, Math.min(this.options.maxZoom * originalState.zoom, zoomScale));\n    // Find relative scale to achieve desired scale\n    zoomScale = zoomScale / this.getZoom();\n  }\n  var oldCTM = this.viewport.getCTM(),\n    relativePoint = point.matrixTransform(oldCTM.inverse()),\n    modifier = this.svg.createSVGMatrix().translate(relativePoint.x, relativePoint.y).scale(zoomScale).translate(-relativePoint.x, -relativePoint.y),\n    newCTM = oldCTM.multiply(modifier);\n  if (newCTM.a !== oldCTM.a) {\n    this.viewport.setCTM(newCTM);\n  }\n};\n\n/**\n * Zoom at center point\n *\n * @param  {Float} scale\n * @param  {Boolean} absolute Marks zoom scale as relative or absolute\n */\nSvgPanZoom.prototype.zoom = function (scale, absolute) {\n  this.zoomAtPoint(scale, SvgUtils.getSvgCenterPoint(this.svg, this.width, this.height), absolute);\n};\n\n/**\n * Zoom used by public instance\n *\n * @param  {Float} scale\n * @param  {Boolean} absolute Marks zoom scale as relative or absolute\n */\nSvgPanZoom.prototype.publicZoom = function (scale, absolute) {\n  if (absolute) {\n    scale = this.computeFromRelativeZoom(scale);\n  }\n  this.zoom(scale, absolute);\n};\n\n/**\n * Zoom at point used by public instance\n *\n * @param  {Float} scale\n * @param  {SVGPoint|Object} point    An object that has x and y attributes\n * @param  {Boolean} absolute Marks zoom scale as relative or absolute\n */\nSvgPanZoom.prototype.publicZoomAtPoint = function (scale, point, absolute) {\n  if (absolute) {\n    // Transform zoom into a relative value\n    scale = this.computeFromRelativeZoom(scale);\n  }\n\n  // If not a SVGPoint but has x and y then create a SVGPoint\n  if (Utils.getType(point) !== \"SVGPoint\") {\n    if (\"x\" in point && \"y\" in point) {\n      point = SvgUtils.createSVGPoint(this.svg, point.x, point.y);\n    } else {\n      throw new Error(\"Given point is invalid\");\n    }\n  }\n  this.zoomAtPoint(scale, point, absolute);\n};\n\n/**\n * Get zoom scale\n *\n * @return {Float} zoom scale\n */\nSvgPanZoom.prototype.getZoom = function () {\n  return this.viewport.getZoom();\n};\n\n/**\n * Get zoom scale for public usage\n *\n * @return {Float} zoom scale\n */\nSvgPanZoom.prototype.getRelativeZoom = function () {\n  return this.viewport.getRelativeZoom();\n};\n\n/**\n * Compute actual zoom from public zoom\n *\n * @param  {Float} zoom\n * @return {Float} zoom scale\n */\nSvgPanZoom.prototype.computeFromRelativeZoom = function (zoom) {\n  return zoom * this.viewport.getOriginalState().zoom;\n};\n\n/**\n * Set zoom to initial state\n */\nSvgPanZoom.prototype.resetZoom = function () {\n  var originalState = this.viewport.getOriginalState();\n  this.zoom(originalState.zoom, true);\n};\n\n/**\n * Set pan to initial state\n */\nSvgPanZoom.prototype.resetPan = function () {\n  this.pan(this.viewport.getOriginalState());\n};\n\n/**\n * Set pan and zoom to initial state\n */\nSvgPanZoom.prototype.reset = function () {\n  this.resetZoom();\n  this.resetPan();\n};\n\n/**\n * Handle double click event\n * See handleMouseDown() for alternate detection method\n *\n * @param {Event} evt\n */\nSvgPanZoom.prototype.handleDblClick = function (evt) {\n  if (this.options.preventMouseEventsDefault) {\n    if (evt.preventDefault) {\n      evt.preventDefault();\n    } else {\n      evt.returnValue = false;\n    }\n  }\n\n  // Check if target was a control button\n  if (this.options.controlIconsEnabled) {\n    var targetClass = evt.target.getAttribute(\"class\") || \"\";\n    if (targetClass.indexOf(\"svg-pan-zoom-control\") > -1) {\n      return false;\n    }\n  }\n  var zoomFactor;\n  if (evt.shiftKey) {\n    zoomFactor = 1 / ((1 + this.options.zoomScaleSensitivity) * 2); // zoom out when shift key pressed\n  } else {\n    zoomFactor = (1 + this.options.zoomScaleSensitivity) * 2;\n  }\n  var point = SvgUtils.getEventPoint(evt, this.svg).matrixTransform(this.svg.getScreenCTM().inverse());\n  this.zoomAtPoint(zoomFactor, point);\n};\n\n/**\n * Handle click event\n *\n * @param {Event} evt\n */\nSvgPanZoom.prototype.handleMouseDown = function (evt, prevEvt) {\n  if (this.options.preventMouseEventsDefault) {\n    if (evt.preventDefault) {\n      evt.preventDefault();\n    } else {\n      evt.returnValue = false;\n    }\n  }\n  Utils.mouseAndTouchNormalize(evt, this.svg);\n\n  // Double click detection; more consistent than ondblclick\n  if (this.options.dblClickZoomEnabled && Utils.isDblClick(evt, prevEvt)) {\n    this.handleDblClick(evt);\n  } else {\n    // Pan mode\n    this.state = \"pan\";\n    this.firstEventCTM = this.viewport.getCTM();\n    this.stateOrigin = SvgUtils.getEventPoint(evt, this.svg).matrixTransform(this.firstEventCTM.inverse());\n  }\n};\n\n/**\n * Handle mouse move event\n *\n * @param  {Event} evt\n */\nSvgPanZoom.prototype.handleMouseMove = function (evt) {\n  if (this.options.preventMouseEventsDefault) {\n    if (evt.preventDefault) {\n      evt.preventDefault();\n    } else {\n      evt.returnValue = false;\n    }\n  }\n  if (this.state === \"pan\" && this.options.panEnabled) {\n    // Pan mode\n    var point = SvgUtils.getEventPoint(evt, this.svg).matrixTransform(this.firstEventCTM.inverse()),\n      viewportCTM = this.firstEventCTM.translate(point.x - this.stateOrigin.x, point.y - this.stateOrigin.y);\n    this.viewport.setCTM(viewportCTM);\n  }\n};\n\n/**\n * Handle mouse button release event\n *\n * @param {Event} evt\n */\nSvgPanZoom.prototype.handleMouseUp = function (evt) {\n  if (this.options.preventMouseEventsDefault) {\n    if (evt.preventDefault) {\n      evt.preventDefault();\n    } else {\n      evt.returnValue = false;\n    }\n  }\n  if (this.state === \"pan\") {\n    // Quit pan mode\n    this.state = \"none\";\n  }\n};\n\n/**\n * Adjust viewport size (only) so it will fit in SVG\n * Does not center image\n */\nSvgPanZoom.prototype.fit = function () {\n  var viewBox = this.viewport.getViewBox(),\n    newScale = Math.min(this.width / viewBox.width, this.height / viewBox.height);\n  this.zoom(newScale, true);\n};\n\n/**\n * Adjust viewport size (only) so it will contain the SVG\n * Does not center image\n */\nSvgPanZoom.prototype.contain = function () {\n  var viewBox = this.viewport.getViewBox(),\n    newScale = Math.max(this.width / viewBox.width, this.height / viewBox.height);\n  this.zoom(newScale, true);\n};\n\n/**\n * Adjust viewport pan (only) so it will be centered in SVG\n * Does not zoom/fit/contain image\n */\nSvgPanZoom.prototype.center = function () {\n  var viewBox = this.viewport.getViewBox(),\n    offsetX = (this.width - (viewBox.width + viewBox.x * 2) * this.getZoom()) * 0.5,\n    offsetY = (this.height - (viewBox.height + viewBox.y * 2) * this.getZoom()) * 0.5;\n  this.getPublicInstance().pan({\n    x: offsetX,\n    y: offsetY\n  });\n};\n\n/**\n * Update content cached BorderBox\n * Use when viewport contents change\n */\nSvgPanZoom.prototype.updateBBox = function () {\n  this.viewport.simpleViewBoxCache();\n};\n\n/**\n * Pan to a rendered position\n *\n * @param  {Object} point {x: 0, y: 0}\n */\nSvgPanZoom.prototype.pan = function (point) {\n  var viewportCTM = this.viewport.getCTM();\n  viewportCTM.e = point.x;\n  viewportCTM.f = point.y;\n  this.viewport.setCTM(viewportCTM);\n};\n\n/**\n * Relatively pan the graph by a specified rendered position vector\n *\n * @param  {Object} point {x: 0, y: 0}\n */\nSvgPanZoom.prototype.panBy = function (point) {\n  var viewportCTM = this.viewport.getCTM();\n  viewportCTM.e += point.x;\n  viewportCTM.f += point.y;\n  this.viewport.setCTM(viewportCTM);\n};\n\n/**\n * Get pan vector\n *\n * @return {Object} {x: 0, y: 0}\n */\nSvgPanZoom.prototype.getPan = function () {\n  var state = this.viewport.getState();\n  return {\n    x: state.x,\n    y: state.y\n  };\n};\n\n/**\n * Recalculates cached svg dimensions and controls position\n */\nSvgPanZoom.prototype.resize = function () {\n  // Get dimensions\n  var boundingClientRectNormalized = SvgUtils.getBoundingClientRectNormalized(this.svg);\n  this.width = boundingClientRectNormalized.width;\n  this.height = boundingClientRectNormalized.height;\n\n  // Recalculate original state\n  var viewport = this.viewport;\n  viewport.options.width = this.width;\n  viewport.options.height = this.height;\n  viewport.processCTM();\n\n  // Reposition control icons by re-enabling them\n  if (this.options.controlIconsEnabled) {\n    this.getPublicInstance().disableControlIcons();\n    this.getPublicInstance().enableControlIcons();\n  }\n};\n\n/**\n * Unbind mouse events, free callbacks and destroy public instance\n */\nSvgPanZoom.prototype.destroy = function () {\n  var that = this;\n\n  // Free callbacks\n  this.beforeZoom = null;\n  this.onZoom = null;\n  this.beforePan = null;\n  this.onPan = null;\n  this.onUpdatedCTM = null;\n\n  // Destroy custom event handlers\n  // eslint-disable-next-line eqeqeq\n  if (this.options.customEventsHandler != null) {\n    this.options.customEventsHandler.destroy({\n      svgElement: this.svg,\n      eventsListenerElement: this.options.eventsListenerElement,\n      instance: this.getPublicInstance()\n    });\n  }\n\n  // Unbind eventListeners\n  for (var event in this.eventListeners) {\n    (this.options.eventsListenerElement || this.svg).removeEventListener(event, this.eventListeners[event], !this.options.preventMouseEventsDefault ? passiveListenerOption : false);\n  }\n\n  // Unbind wheelListener\n  this.disableMouseWheelZoom();\n\n  // Remove control icons\n  this.getPublicInstance().disableControlIcons();\n\n  // Reset zoom and pan\n  this.reset();\n\n  // Remove instance from instancesStore\n  instancesStore = instancesStore.filter(function (instance) {\n    return instance.svg !== that.svg;\n  });\n\n  // Delete options and its contents\n  delete this.options;\n\n  // Delete viewport to make public shadow viewport functions uncallable\n  delete this.viewport;\n\n  // Destroy public instance and rewrite getPublicInstance\n  delete this.publicInstance;\n  delete this.pi;\n  this.getPublicInstance = function () {\n    return null;\n  };\n};\n\n/**\n * Returns a public instance object\n *\n * @return {Object} Public instance object\n */\nSvgPanZoom.prototype.getPublicInstance = function () {\n  var that = this;\n\n  // Create cache\n  if (!this.publicInstance) {\n    this.publicInstance = this.pi = {\n      // Pan\n      enablePan: function () {\n        that.options.panEnabled = true;\n        return that.pi;\n      },\n      disablePan: function () {\n        that.options.panEnabled = false;\n        return that.pi;\n      },\n      isPanEnabled: function () {\n        return !!that.options.panEnabled;\n      },\n      pan: function (point) {\n        that.pan(point);\n        return that.pi;\n      },\n      panBy: function (point) {\n        that.panBy(point);\n        return that.pi;\n      },\n      getPan: function () {\n        return that.getPan();\n      },\n      // Pan event\n      setBeforePan: function (fn) {\n        that.options.beforePan = fn === null ? null : Utils.proxy(fn, that.publicInstance);\n        return that.pi;\n      },\n      setOnPan: function (fn) {\n        that.options.onPan = fn === null ? null : Utils.proxy(fn, that.publicInstance);\n        return that.pi;\n      },\n      // Zoom and Control Icons\n      enableZoom: function () {\n        that.options.zoomEnabled = true;\n        return that.pi;\n      },\n      disableZoom: function () {\n        that.options.zoomEnabled = false;\n        return that.pi;\n      },\n      isZoomEnabled: function () {\n        return !!that.options.zoomEnabled;\n      },\n      enableControlIcons: function () {\n        if (!that.options.controlIconsEnabled) {\n          that.options.controlIconsEnabled = true;\n          ControlIcons.enable(that);\n        }\n        return that.pi;\n      },\n      disableControlIcons: function () {\n        if (that.options.controlIconsEnabled) {\n          that.options.controlIconsEnabled = false;\n          ControlIcons.disable(that);\n        }\n        return that.pi;\n      },\n      isControlIconsEnabled: function () {\n        return !!that.options.controlIconsEnabled;\n      },\n      // Double click zoom\n      enableDblClickZoom: function () {\n        that.options.dblClickZoomEnabled = true;\n        return that.pi;\n      },\n      disableDblClickZoom: function () {\n        that.options.dblClickZoomEnabled = false;\n        return that.pi;\n      },\n      isDblClickZoomEnabled: function () {\n        return !!that.options.dblClickZoomEnabled;\n      },\n      // Mouse wheel zoom\n      enableMouseWheelZoom: function () {\n        that.enableMouseWheelZoom();\n        return that.pi;\n      },\n      disableMouseWheelZoom: function () {\n        that.disableMouseWheelZoom();\n        return that.pi;\n      },\n      isMouseWheelZoomEnabled: function () {\n        return !!that.options.mouseWheelZoomEnabled;\n      },\n      // Zoom scale and bounds\n      setZoomScaleSensitivity: function (scale) {\n        that.options.zoomScaleSensitivity = scale;\n        return that.pi;\n      },\n      setMinZoom: function (zoom) {\n        that.options.minZoom = zoom;\n        return that.pi;\n      },\n      setMaxZoom: function (zoom) {\n        that.options.maxZoom = zoom;\n        return that.pi;\n      },\n      // Zoom event\n      setBeforeZoom: function (fn) {\n        that.options.beforeZoom = fn === null ? null : Utils.proxy(fn, that.publicInstance);\n        return that.pi;\n      },\n      setOnZoom: function (fn) {\n        that.options.onZoom = fn === null ? null : Utils.proxy(fn, that.publicInstance);\n        return that.pi;\n      },\n      // Zooming\n      zoom: function (scale) {\n        that.publicZoom(scale, true);\n        return that.pi;\n      },\n      zoomBy: function (scale) {\n        that.publicZoom(scale, false);\n        return that.pi;\n      },\n      zoomAtPoint: function (scale, point) {\n        that.publicZoomAtPoint(scale, point, true);\n        return that.pi;\n      },\n      zoomAtPointBy: function (scale, point) {\n        that.publicZoomAtPoint(scale, point, false);\n        return that.pi;\n      },\n      zoomIn: function () {\n        this.zoomBy(1 + that.options.zoomScaleSensitivity);\n        return that.pi;\n      },\n      zoomOut: function () {\n        this.zoomBy(1 / (1 + that.options.zoomScaleSensitivity));\n        return that.pi;\n      },\n      getZoom: function () {\n        return that.getRelativeZoom();\n      },\n      // CTM update\n      setOnUpdatedCTM: function (fn) {\n        that.options.onUpdatedCTM = fn === null ? null : Utils.proxy(fn, that.publicInstance);\n        return that.pi;\n      },\n      // Reset\n      resetZoom: function () {\n        that.resetZoom();\n        return that.pi;\n      },\n      resetPan: function () {\n        that.resetPan();\n        return that.pi;\n      },\n      reset: function () {\n        that.reset();\n        return that.pi;\n      },\n      // Fit, Contain and Center\n      fit: function () {\n        that.fit();\n        return that.pi;\n      },\n      contain: function () {\n        that.contain();\n        return that.pi;\n      },\n      center: function () {\n        that.center();\n        return that.pi;\n      },\n      // Size and Resize\n      updateBBox: function () {\n        that.updateBBox();\n        return that.pi;\n      },\n      resize: function () {\n        that.resize();\n        return that.pi;\n      },\n      getSizes: function () {\n        return {\n          width: that.width,\n          height: that.height,\n          realZoom: that.getZoom(),\n          viewBox: that.viewport.getViewBox()\n        };\n      },\n      // Destroy\n      destroy: function () {\n        that.destroy();\n        return that.pi;\n      }\n    };\n  }\n  return this.publicInstance;\n};\n\n/**\n * Stores pairs of instances of SvgPanZoom and SVG\n * Each pair is represented by an object {svg: SVGSVGElement, instance: SvgPanZoom}\n *\n * @type {Array}\n */\nvar instancesStore = [];\nvar svgPanZoom = function (elementOrSelector, options) {\n  var svg = Utils.getSvg(elementOrSelector);\n  if (svg === null) {\n    return null;\n  } else {\n    // Look for existent instance\n    for (var i = instancesStore.length - 1; i >= 0; i--) {\n      if (instancesStore[i].svg === svg) {\n        return instancesStore[i].instance.getPublicInstance();\n      }\n    }\n\n    // If instance not found - create one\n    instancesStore.push({\n      svg: svg,\n      instance: new SvgPanZoom(svg, options)\n    });\n\n    // Return just pushed instance\n    return instancesStore[instancesStore.length - 1].instance.getPublicInstance();\n  }\n};\nmodule.exports = svgPanZoom;","map":{"version":3,"names":["Wheel","require","ControlIcons","Utils","SvgUtils","ShadowViewport","SvgPanZoom","svg","options","init","optionsDefaults","viewportSelector","panEnabled","controlIconsEnabled","zoomEnabled","dblClickZoomEnabled","mouseWheelZoomEnabled","preventMouseEventsDefault","zoomScaleSensitivity","minZoom","maxZoom","fit","contain","center","refreshRate","beforeZoom","onZoom","beforePan","onPan","customEventsHandler","eventsListenerElement","onUpdatedCTM","passiveListenerOption","passive","prototype","that","defs","querySelector","setupSvgAttributes","extend","state","boundingClientRectNormalized","getBoundingClientRectNormalized","width","height","viewport","getOrCreateViewport","oldScale","newScale","scale","oldPoint","newPoint","point","ctm","publicInstance","getPublicInstance","setBeforeZoom","setOnZoom","setBeforePan","setOnPan","setOnUpdatedCTM","enable","lastMouseWheelEventTime","Date","now","setupHandlers","prevEvt","eventListeners","mousedown","evt","result","handleMouseDown","touchstart","mouseup","handleMouseUp","touchend","mousemove","handleMouseMove","touchmove","mouseleave","touchleave","touchcancel","svgElement","instance","haltEventListeners","length","i","hasOwnProperty","event","addEventListener","enableMouseWheelZoom","wheelListener","handleMouseWheel","isPassiveListener","on","disableMouseWheelZoom","off","preventDefault","returnValue","delta","deltaY","timeDelta","divider","Math","max","deltaMode","wheelDelta","abs","log","inversedScreenCTM","getScreenCTM","inverse","relativeMousePoint","getEventPoint","matrixTransform","zoom","pow","zoomAtPoint","zoomScale","zoomAbsolute","originalState","getOriginalState","getZoom","min","oldCTM","getCTM","relativePoint","modifier","createSVGMatrix","translate","x","y","newCTM","multiply","a","setCTM","absolute","getSvgCenterPoint","publicZoom","computeFromRelativeZoom","publicZoomAtPoint","getType","createSVGPoint","Error","getRelativeZoom","resetZoom","resetPan","pan","reset","handleDblClick","targetClass","target","getAttribute","indexOf","zoomFactor","shiftKey","mouseAndTouchNormalize","isDblClick","firstEventCTM","stateOrigin","viewportCTM","viewBox","getViewBox","offsetX","offsetY","updateBBox","simpleViewBoxCache","e","f","panBy","getPan","getState","resize","processCTM","disableControlIcons","enableControlIcons","destroy","removeEventListener","instancesStore","filter","pi","enablePan","disablePan","isPanEnabled","fn","proxy","enableZoom","disableZoom","isZoomEnabled","disable","isControlIconsEnabled","enableDblClickZoom","disableDblClickZoom","isDblClickZoomEnabled","isMouseWheelZoomEnabled","setZoomScaleSensitivity","setMinZoom","setMaxZoom","zoomBy","zoomAtPointBy","zoomIn","zoomOut","getSizes","realZoom","svgPanZoom","elementOrSelector","getSvg","push","module","exports"],"sources":["/Users/arricodyanto/Dev/react-mapp/node_modules/svg-pan-zoom/src/svg-pan-zoom.js"],"sourcesContent":["var Wheel = require(\"./uniwheel\"),\n  ControlIcons = require(\"./control-icons\"),\n  Utils = require(\"./utilities\"),\n  SvgUtils = require(\"./svg-utilities\"),\n  ShadowViewport = require(\"./shadow-viewport\");\n\nvar SvgPanZoom = function(svg, options) {\n  this.init(svg, options);\n};\n\nvar optionsDefaults = {\n  viewportSelector: \".svg-pan-zoom_viewport\", // Viewport selector. Can be querySelector string or SVGElement\n  panEnabled: true, // enable or disable panning (default enabled)\n  controlIconsEnabled: false, // insert icons to give user an option in addition to mouse events to control pan/zoom (default disabled)\n  zoomEnabled: true, // enable or disable zooming (default enabled)\n  dblClickZoomEnabled: true, // enable or disable zooming by double clicking (default enabled)\n  mouseWheelZoomEnabled: true, // enable or disable zooming by mouse wheel (default enabled)\n  preventMouseEventsDefault: true, // enable or disable preventDefault for mouse events\n  zoomScaleSensitivity: 0.1, // Zoom sensitivity\n  minZoom: 0.5, // Minimum Zoom level\n  maxZoom: 10, // Maximum Zoom level\n  fit: true, // enable or disable viewport fit in SVG (default true)\n  contain: false, // enable or disable viewport contain the svg (default false)\n  center: true, // enable or disable viewport centering in SVG (default true)\n  refreshRate: \"auto\", // Maximum number of frames per second (altering SVG's viewport)\n  beforeZoom: null,\n  onZoom: null,\n  beforePan: null,\n  onPan: null,\n  customEventsHandler: null,\n  eventsListenerElement: null,\n  onUpdatedCTM: null\n};\n\nvar passiveListenerOption = { passive: true };\n\nSvgPanZoom.prototype.init = function(svg, options) {\n  var that = this;\n\n  this.svg = svg;\n  this.defs = svg.querySelector(\"defs\");\n\n  // Add default attributes to SVG\n  SvgUtils.setupSvgAttributes(this.svg);\n\n  // Set options\n  this.options = Utils.extend(Utils.extend({}, optionsDefaults), options);\n\n  // Set default state\n  this.state = \"none\";\n\n  // Get dimensions\n  var boundingClientRectNormalized = SvgUtils.getBoundingClientRectNormalized(\n    svg\n  );\n  this.width = boundingClientRectNormalized.width;\n  this.height = boundingClientRectNormalized.height;\n\n  // Init shadow viewport\n  this.viewport = ShadowViewport(\n    SvgUtils.getOrCreateViewport(this.svg, this.options.viewportSelector),\n    {\n      svg: this.svg,\n      width: this.width,\n      height: this.height,\n      fit: this.options.fit,\n      contain: this.options.contain,\n      center: this.options.center,\n      refreshRate: this.options.refreshRate,\n      // Put callbacks into functions as they can change through time\n      beforeZoom: function(oldScale, newScale) {\n        if (that.viewport && that.options.beforeZoom) {\n          return that.options.beforeZoom(oldScale, newScale);\n        }\n      },\n      onZoom: function(scale) {\n        if (that.viewport && that.options.onZoom) {\n          return that.options.onZoom(scale);\n        }\n      },\n      beforePan: function(oldPoint, newPoint) {\n        if (that.viewport && that.options.beforePan) {\n          return that.options.beforePan(oldPoint, newPoint);\n        }\n      },\n      onPan: function(point) {\n        if (that.viewport && that.options.onPan) {\n          return that.options.onPan(point);\n        }\n      },\n      onUpdatedCTM: function(ctm) {\n        if (that.viewport && that.options.onUpdatedCTM) {\n          return that.options.onUpdatedCTM(ctm);\n        }\n      }\n    }\n  );\n\n  // Wrap callbacks into public API context\n  var publicInstance = this.getPublicInstance();\n  publicInstance.setBeforeZoom(this.options.beforeZoom);\n  publicInstance.setOnZoom(this.options.onZoom);\n  publicInstance.setBeforePan(this.options.beforePan);\n  publicInstance.setOnPan(this.options.onPan);\n  publicInstance.setOnUpdatedCTM(this.options.onUpdatedCTM);\n\n  if (this.options.controlIconsEnabled) {\n    ControlIcons.enable(this);\n  }\n\n  // Init events handlers\n  this.lastMouseWheelEventTime = Date.now();\n  this.setupHandlers();\n};\n\n/**\n * Register event handlers\n */\nSvgPanZoom.prototype.setupHandlers = function() {\n  var that = this,\n    prevEvt = null; // use for touchstart event to detect double tap\n\n  this.eventListeners = {\n    // Mouse down group\n    mousedown: function(evt) {\n      var result = that.handleMouseDown(evt, prevEvt);\n      prevEvt = evt;\n      return result;\n    },\n    touchstart: function(evt) {\n      var result = that.handleMouseDown(evt, prevEvt);\n      prevEvt = evt;\n      return result;\n    },\n\n    // Mouse up group\n    mouseup: function(evt) {\n      return that.handleMouseUp(evt);\n    },\n    touchend: function(evt) {\n      return that.handleMouseUp(evt);\n    },\n\n    // Mouse move group\n    mousemove: function(evt) {\n      return that.handleMouseMove(evt);\n    },\n    touchmove: function(evt) {\n      return that.handleMouseMove(evt);\n    },\n\n    // Mouse leave group\n    mouseleave: function(evt) {\n      return that.handleMouseUp(evt);\n    },\n    touchleave: function(evt) {\n      return that.handleMouseUp(evt);\n    },\n    touchcancel: function(evt) {\n      return that.handleMouseUp(evt);\n    }\n  };\n\n  // Init custom events handler if available\n  // eslint-disable-next-line eqeqeq\n  if (this.options.customEventsHandler != null) {\n    this.options.customEventsHandler.init({\n      svgElement: this.svg,\n      eventsListenerElement: this.options.eventsListenerElement,\n      instance: this.getPublicInstance()\n    });\n\n    // Custom event handler may halt builtin listeners\n    var haltEventListeners = this.options.customEventsHandler\n      .haltEventListeners;\n    if (haltEventListeners && haltEventListeners.length) {\n      for (var i = haltEventListeners.length - 1; i >= 0; i--) {\n        if (this.eventListeners.hasOwnProperty(haltEventListeners[i])) {\n          delete this.eventListeners[haltEventListeners[i]];\n        }\n      }\n    }\n  }\n\n  // Bind eventListeners\n  for (var event in this.eventListeners) {\n    // Attach event to eventsListenerElement or SVG if not available\n    (this.options.eventsListenerElement || this.svg).addEventListener(\n      event,\n      this.eventListeners[event],\n      !this.options.preventMouseEventsDefault ? passiveListenerOption : false\n    );\n  }\n\n  // Zoom using mouse wheel\n  if (this.options.mouseWheelZoomEnabled) {\n    this.options.mouseWheelZoomEnabled = false; // set to false as enable will set it back to true\n    this.enableMouseWheelZoom();\n  }\n};\n\n/**\n * Enable ability to zoom using mouse wheel\n */\nSvgPanZoom.prototype.enableMouseWheelZoom = function() {\n  if (!this.options.mouseWheelZoomEnabled) {\n    var that = this;\n\n    // Mouse wheel listener\n    this.wheelListener = function(evt) {\n      return that.handleMouseWheel(evt);\n    };\n\n    // Bind wheelListener\n    var isPassiveListener = !this.options.preventMouseEventsDefault;\n    Wheel.on(\n      this.options.eventsListenerElement || this.svg,\n      this.wheelListener,\n      isPassiveListener\n    );\n\n    this.options.mouseWheelZoomEnabled = true;\n  }\n};\n\n/**\n * Disable ability to zoom using mouse wheel\n */\nSvgPanZoom.prototype.disableMouseWheelZoom = function() {\n  if (this.options.mouseWheelZoomEnabled) {\n    var isPassiveListener = !this.options.preventMouseEventsDefault;\n    Wheel.off(\n      this.options.eventsListenerElement || this.svg,\n      this.wheelListener,\n      isPassiveListener\n    );\n    this.options.mouseWheelZoomEnabled = false;\n  }\n};\n\n/**\n * Handle mouse wheel event\n *\n * @param  {Event} evt\n */\nSvgPanZoom.prototype.handleMouseWheel = function(evt) {\n  if (!this.options.zoomEnabled || this.state !== \"none\") {\n    return;\n  }\n\n  if (this.options.preventMouseEventsDefault) {\n    if (evt.preventDefault) {\n      evt.preventDefault();\n    } else {\n      evt.returnValue = false;\n    }\n  }\n\n  // Default delta in case that deltaY is not available\n  var delta = evt.deltaY || 1,\n    timeDelta = Date.now() - this.lastMouseWheelEventTime,\n    divider = 3 + Math.max(0, 30 - timeDelta);\n\n  // Update cache\n  this.lastMouseWheelEventTime = Date.now();\n\n  // Make empirical adjustments for browsers that give deltaY in pixels (deltaMode=0)\n  if (\"deltaMode\" in evt && evt.deltaMode === 0 && evt.wheelDelta) {\n    delta = evt.deltaY === 0 ? 0 : Math.abs(evt.wheelDelta) / evt.deltaY;\n  }\n\n  delta =\n    -0.3 < delta && delta < 0.3\n      ? delta\n      : ((delta > 0 ? 1 : -1) * Math.log(Math.abs(delta) + 10)) / divider;\n\n  var inversedScreenCTM = this.svg.getScreenCTM().inverse(),\n    relativeMousePoint = SvgUtils.getEventPoint(evt, this.svg).matrixTransform(\n      inversedScreenCTM\n    ),\n    zoom = Math.pow(1 + this.options.zoomScaleSensitivity, -1 * delta); // multiplying by neg. 1 so as to make zoom in/out behavior match Google maps behavior\n\n  this.zoomAtPoint(zoom, relativeMousePoint);\n};\n\n/**\n * Zoom in at a SVG point\n *\n * @param  {SVGPoint} point\n * @param  {Float} zoomScale    Number representing how much to zoom\n * @param  {Boolean} zoomAbsolute Default false. If true, zoomScale is treated as an absolute value.\n *                                Otherwise, zoomScale is treated as a multiplied (e.g. 1.10 would zoom in 10%)\n */\nSvgPanZoom.prototype.zoomAtPoint = function(zoomScale, point, zoomAbsolute) {\n  var originalState = this.viewport.getOriginalState();\n\n  if (!zoomAbsolute) {\n    // Fit zoomScale in set bounds\n    if (\n      this.getZoom() * zoomScale <\n      this.options.minZoom * originalState.zoom\n    ) {\n      zoomScale = (this.options.minZoom * originalState.zoom) / this.getZoom();\n    } else if (\n      this.getZoom() * zoomScale >\n      this.options.maxZoom * originalState.zoom\n    ) {\n      zoomScale = (this.options.maxZoom * originalState.zoom) / this.getZoom();\n    }\n  } else {\n    // Fit zoomScale in set bounds\n    zoomScale = Math.max(\n      this.options.minZoom * originalState.zoom,\n      Math.min(this.options.maxZoom * originalState.zoom, zoomScale)\n    );\n    // Find relative scale to achieve desired scale\n    zoomScale = zoomScale / this.getZoom();\n  }\n\n  var oldCTM = this.viewport.getCTM(),\n    relativePoint = point.matrixTransform(oldCTM.inverse()),\n    modifier = this.svg\n      .createSVGMatrix()\n      .translate(relativePoint.x, relativePoint.y)\n      .scale(zoomScale)\n      .translate(-relativePoint.x, -relativePoint.y),\n    newCTM = oldCTM.multiply(modifier);\n\n  if (newCTM.a !== oldCTM.a) {\n    this.viewport.setCTM(newCTM);\n  }\n};\n\n/**\n * Zoom at center point\n *\n * @param  {Float} scale\n * @param  {Boolean} absolute Marks zoom scale as relative or absolute\n */\nSvgPanZoom.prototype.zoom = function(scale, absolute) {\n  this.zoomAtPoint(\n    scale,\n    SvgUtils.getSvgCenterPoint(this.svg, this.width, this.height),\n    absolute\n  );\n};\n\n/**\n * Zoom used by public instance\n *\n * @param  {Float} scale\n * @param  {Boolean} absolute Marks zoom scale as relative or absolute\n */\nSvgPanZoom.prototype.publicZoom = function(scale, absolute) {\n  if (absolute) {\n    scale = this.computeFromRelativeZoom(scale);\n  }\n\n  this.zoom(scale, absolute);\n};\n\n/**\n * Zoom at point used by public instance\n *\n * @param  {Float} scale\n * @param  {SVGPoint|Object} point    An object that has x and y attributes\n * @param  {Boolean} absolute Marks zoom scale as relative or absolute\n */\nSvgPanZoom.prototype.publicZoomAtPoint = function(scale, point, absolute) {\n  if (absolute) {\n    // Transform zoom into a relative value\n    scale = this.computeFromRelativeZoom(scale);\n  }\n\n  // If not a SVGPoint but has x and y then create a SVGPoint\n  if (Utils.getType(point) !== \"SVGPoint\") {\n    if (\"x\" in point && \"y\" in point) {\n      point = SvgUtils.createSVGPoint(this.svg, point.x, point.y);\n    } else {\n      throw new Error(\"Given point is invalid\");\n    }\n  }\n\n  this.zoomAtPoint(scale, point, absolute);\n};\n\n/**\n * Get zoom scale\n *\n * @return {Float} zoom scale\n */\nSvgPanZoom.prototype.getZoom = function() {\n  return this.viewport.getZoom();\n};\n\n/**\n * Get zoom scale for public usage\n *\n * @return {Float} zoom scale\n */\nSvgPanZoom.prototype.getRelativeZoom = function() {\n  return this.viewport.getRelativeZoom();\n};\n\n/**\n * Compute actual zoom from public zoom\n *\n * @param  {Float} zoom\n * @return {Float} zoom scale\n */\nSvgPanZoom.prototype.computeFromRelativeZoom = function(zoom) {\n  return zoom * this.viewport.getOriginalState().zoom;\n};\n\n/**\n * Set zoom to initial state\n */\nSvgPanZoom.prototype.resetZoom = function() {\n  var originalState = this.viewport.getOriginalState();\n\n  this.zoom(originalState.zoom, true);\n};\n\n/**\n * Set pan to initial state\n */\nSvgPanZoom.prototype.resetPan = function() {\n  this.pan(this.viewport.getOriginalState());\n};\n\n/**\n * Set pan and zoom to initial state\n */\nSvgPanZoom.prototype.reset = function() {\n  this.resetZoom();\n  this.resetPan();\n};\n\n/**\n * Handle double click event\n * See handleMouseDown() for alternate detection method\n *\n * @param {Event} evt\n */\nSvgPanZoom.prototype.handleDblClick = function(evt) {\n  if (this.options.preventMouseEventsDefault) {\n    if (evt.preventDefault) {\n      evt.preventDefault();\n    } else {\n      evt.returnValue = false;\n    }\n  }\n\n  // Check if target was a control button\n  if (this.options.controlIconsEnabled) {\n    var targetClass = evt.target.getAttribute(\"class\") || \"\";\n    if (targetClass.indexOf(\"svg-pan-zoom-control\") > -1) {\n      return false;\n    }\n  }\n\n  var zoomFactor;\n\n  if (evt.shiftKey) {\n    zoomFactor = 1 / ((1 + this.options.zoomScaleSensitivity) * 2); // zoom out when shift key pressed\n  } else {\n    zoomFactor = (1 + this.options.zoomScaleSensitivity) * 2;\n  }\n\n  var point = SvgUtils.getEventPoint(evt, this.svg).matrixTransform(\n    this.svg.getScreenCTM().inverse()\n  );\n  this.zoomAtPoint(zoomFactor, point);\n};\n\n/**\n * Handle click event\n *\n * @param {Event} evt\n */\nSvgPanZoom.prototype.handleMouseDown = function(evt, prevEvt) {\n  if (this.options.preventMouseEventsDefault) {\n    if (evt.preventDefault) {\n      evt.preventDefault();\n    } else {\n      evt.returnValue = false;\n    }\n  }\n\n  Utils.mouseAndTouchNormalize(evt, this.svg);\n\n  // Double click detection; more consistent than ondblclick\n  if (this.options.dblClickZoomEnabled && Utils.isDblClick(evt, prevEvt)) {\n    this.handleDblClick(evt);\n  } else {\n    // Pan mode\n    this.state = \"pan\";\n    this.firstEventCTM = this.viewport.getCTM();\n    this.stateOrigin = SvgUtils.getEventPoint(evt, this.svg).matrixTransform(\n      this.firstEventCTM.inverse()\n    );\n  }\n};\n\n/**\n * Handle mouse move event\n *\n * @param  {Event} evt\n */\nSvgPanZoom.prototype.handleMouseMove = function(evt) {\n  if (this.options.preventMouseEventsDefault) {\n    if (evt.preventDefault) {\n      evt.preventDefault();\n    } else {\n      evt.returnValue = false;\n    }\n  }\n\n  if (this.state === \"pan\" && this.options.panEnabled) {\n    // Pan mode\n    var point = SvgUtils.getEventPoint(evt, this.svg).matrixTransform(\n        this.firstEventCTM.inverse()\n      ),\n      viewportCTM = this.firstEventCTM.translate(\n        point.x - this.stateOrigin.x,\n        point.y - this.stateOrigin.y\n      );\n\n    this.viewport.setCTM(viewportCTM);\n  }\n};\n\n/**\n * Handle mouse button release event\n *\n * @param {Event} evt\n */\nSvgPanZoom.prototype.handleMouseUp = function(evt) {\n  if (this.options.preventMouseEventsDefault) {\n    if (evt.preventDefault) {\n      evt.preventDefault();\n    } else {\n      evt.returnValue = false;\n    }\n  }\n\n  if (this.state === \"pan\") {\n    // Quit pan mode\n    this.state = \"none\";\n  }\n};\n\n/**\n * Adjust viewport size (only) so it will fit in SVG\n * Does not center image\n */\nSvgPanZoom.prototype.fit = function() {\n  var viewBox = this.viewport.getViewBox(),\n    newScale = Math.min(\n      this.width / viewBox.width,\n      this.height / viewBox.height\n    );\n\n  this.zoom(newScale, true);\n};\n\n/**\n * Adjust viewport size (only) so it will contain the SVG\n * Does not center image\n */\nSvgPanZoom.prototype.contain = function() {\n  var viewBox = this.viewport.getViewBox(),\n    newScale = Math.max(\n      this.width / viewBox.width,\n      this.height / viewBox.height\n    );\n\n  this.zoom(newScale, true);\n};\n\n/**\n * Adjust viewport pan (only) so it will be centered in SVG\n * Does not zoom/fit/contain image\n */\nSvgPanZoom.prototype.center = function() {\n  var viewBox = this.viewport.getViewBox(),\n    offsetX =\n      (this.width - (viewBox.width + viewBox.x * 2) * this.getZoom()) * 0.5,\n    offsetY =\n      (this.height - (viewBox.height + viewBox.y * 2) * this.getZoom()) * 0.5;\n\n  this.getPublicInstance().pan({ x: offsetX, y: offsetY });\n};\n\n/**\n * Update content cached BorderBox\n * Use when viewport contents change\n */\nSvgPanZoom.prototype.updateBBox = function() {\n  this.viewport.simpleViewBoxCache();\n};\n\n/**\n * Pan to a rendered position\n *\n * @param  {Object} point {x: 0, y: 0}\n */\nSvgPanZoom.prototype.pan = function(point) {\n  var viewportCTM = this.viewport.getCTM();\n  viewportCTM.e = point.x;\n  viewportCTM.f = point.y;\n  this.viewport.setCTM(viewportCTM);\n};\n\n/**\n * Relatively pan the graph by a specified rendered position vector\n *\n * @param  {Object} point {x: 0, y: 0}\n */\nSvgPanZoom.prototype.panBy = function(point) {\n  var viewportCTM = this.viewport.getCTM();\n  viewportCTM.e += point.x;\n  viewportCTM.f += point.y;\n  this.viewport.setCTM(viewportCTM);\n};\n\n/**\n * Get pan vector\n *\n * @return {Object} {x: 0, y: 0}\n */\nSvgPanZoom.prototype.getPan = function() {\n  var state = this.viewport.getState();\n\n  return { x: state.x, y: state.y };\n};\n\n/**\n * Recalculates cached svg dimensions and controls position\n */\nSvgPanZoom.prototype.resize = function() {\n  // Get dimensions\n  var boundingClientRectNormalized = SvgUtils.getBoundingClientRectNormalized(\n    this.svg\n  );\n  this.width = boundingClientRectNormalized.width;\n  this.height = boundingClientRectNormalized.height;\n\n  // Recalculate original state\n  var viewport = this.viewport;\n  viewport.options.width = this.width;\n  viewport.options.height = this.height;\n  viewport.processCTM();\n\n  // Reposition control icons by re-enabling them\n  if (this.options.controlIconsEnabled) {\n    this.getPublicInstance().disableControlIcons();\n    this.getPublicInstance().enableControlIcons();\n  }\n};\n\n/**\n * Unbind mouse events, free callbacks and destroy public instance\n */\nSvgPanZoom.prototype.destroy = function() {\n  var that = this;\n\n  // Free callbacks\n  this.beforeZoom = null;\n  this.onZoom = null;\n  this.beforePan = null;\n  this.onPan = null;\n  this.onUpdatedCTM = null;\n\n  // Destroy custom event handlers\n  // eslint-disable-next-line eqeqeq\n  if (this.options.customEventsHandler != null) {\n    this.options.customEventsHandler.destroy({\n      svgElement: this.svg,\n      eventsListenerElement: this.options.eventsListenerElement,\n      instance: this.getPublicInstance()\n    });\n  }\n\n  // Unbind eventListeners\n  for (var event in this.eventListeners) {\n    (this.options.eventsListenerElement || this.svg).removeEventListener(\n      event,\n      this.eventListeners[event],\n      !this.options.preventMouseEventsDefault ? passiveListenerOption : false\n    );\n  }\n\n  // Unbind wheelListener\n  this.disableMouseWheelZoom();\n\n  // Remove control icons\n  this.getPublicInstance().disableControlIcons();\n\n  // Reset zoom and pan\n  this.reset();\n\n  // Remove instance from instancesStore\n  instancesStore = instancesStore.filter(function(instance) {\n    return instance.svg !== that.svg;\n  });\n\n  // Delete options and its contents\n  delete this.options;\n\n  // Delete viewport to make public shadow viewport functions uncallable\n  delete this.viewport;\n\n  // Destroy public instance and rewrite getPublicInstance\n  delete this.publicInstance;\n  delete this.pi;\n  this.getPublicInstance = function() {\n    return null;\n  };\n};\n\n/**\n * Returns a public instance object\n *\n * @return {Object} Public instance object\n */\nSvgPanZoom.prototype.getPublicInstance = function() {\n  var that = this;\n\n  // Create cache\n  if (!this.publicInstance) {\n    this.publicInstance = this.pi = {\n      // Pan\n      enablePan: function() {\n        that.options.panEnabled = true;\n        return that.pi;\n      },\n      disablePan: function() {\n        that.options.panEnabled = false;\n        return that.pi;\n      },\n      isPanEnabled: function() {\n        return !!that.options.panEnabled;\n      },\n      pan: function(point) {\n        that.pan(point);\n        return that.pi;\n      },\n      panBy: function(point) {\n        that.panBy(point);\n        return that.pi;\n      },\n      getPan: function() {\n        return that.getPan();\n      },\n      // Pan event\n      setBeforePan: function(fn) {\n        that.options.beforePan =\n          fn === null ? null : Utils.proxy(fn, that.publicInstance);\n        return that.pi;\n      },\n      setOnPan: function(fn) {\n        that.options.onPan =\n          fn === null ? null : Utils.proxy(fn, that.publicInstance);\n        return that.pi;\n      },\n      // Zoom and Control Icons\n      enableZoom: function() {\n        that.options.zoomEnabled = true;\n        return that.pi;\n      },\n      disableZoom: function() {\n        that.options.zoomEnabled = false;\n        return that.pi;\n      },\n      isZoomEnabled: function() {\n        return !!that.options.zoomEnabled;\n      },\n      enableControlIcons: function() {\n        if (!that.options.controlIconsEnabled) {\n          that.options.controlIconsEnabled = true;\n          ControlIcons.enable(that);\n        }\n        return that.pi;\n      },\n      disableControlIcons: function() {\n        if (that.options.controlIconsEnabled) {\n          that.options.controlIconsEnabled = false;\n          ControlIcons.disable(that);\n        }\n        return that.pi;\n      },\n      isControlIconsEnabled: function() {\n        return !!that.options.controlIconsEnabled;\n      },\n      // Double click zoom\n      enableDblClickZoom: function() {\n        that.options.dblClickZoomEnabled = true;\n        return that.pi;\n      },\n      disableDblClickZoom: function() {\n        that.options.dblClickZoomEnabled = false;\n        return that.pi;\n      },\n      isDblClickZoomEnabled: function() {\n        return !!that.options.dblClickZoomEnabled;\n      },\n      // Mouse wheel zoom\n      enableMouseWheelZoom: function() {\n        that.enableMouseWheelZoom();\n        return that.pi;\n      },\n      disableMouseWheelZoom: function() {\n        that.disableMouseWheelZoom();\n        return that.pi;\n      },\n      isMouseWheelZoomEnabled: function() {\n        return !!that.options.mouseWheelZoomEnabled;\n      },\n      // Zoom scale and bounds\n      setZoomScaleSensitivity: function(scale) {\n        that.options.zoomScaleSensitivity = scale;\n        return that.pi;\n      },\n      setMinZoom: function(zoom) {\n        that.options.minZoom = zoom;\n        return that.pi;\n      },\n      setMaxZoom: function(zoom) {\n        that.options.maxZoom = zoom;\n        return that.pi;\n      },\n      // Zoom event\n      setBeforeZoom: function(fn) {\n        that.options.beforeZoom =\n          fn === null ? null : Utils.proxy(fn, that.publicInstance);\n        return that.pi;\n      },\n      setOnZoom: function(fn) {\n        that.options.onZoom =\n          fn === null ? null : Utils.proxy(fn, that.publicInstance);\n        return that.pi;\n      },\n      // Zooming\n      zoom: function(scale) {\n        that.publicZoom(scale, true);\n        return that.pi;\n      },\n      zoomBy: function(scale) {\n        that.publicZoom(scale, false);\n        return that.pi;\n      },\n      zoomAtPoint: function(scale, point) {\n        that.publicZoomAtPoint(scale, point, true);\n        return that.pi;\n      },\n      zoomAtPointBy: function(scale, point) {\n        that.publicZoomAtPoint(scale, point, false);\n        return that.pi;\n      },\n      zoomIn: function() {\n        this.zoomBy(1 + that.options.zoomScaleSensitivity);\n        return that.pi;\n      },\n      zoomOut: function() {\n        this.zoomBy(1 / (1 + that.options.zoomScaleSensitivity));\n        return that.pi;\n      },\n      getZoom: function() {\n        return that.getRelativeZoom();\n      },\n      // CTM update\n      setOnUpdatedCTM: function(fn) {\n        that.options.onUpdatedCTM =\n          fn === null ? null : Utils.proxy(fn, that.publicInstance);\n        return that.pi;\n      },\n      // Reset\n      resetZoom: function() {\n        that.resetZoom();\n        return that.pi;\n      },\n      resetPan: function() {\n        that.resetPan();\n        return that.pi;\n      },\n      reset: function() {\n        that.reset();\n        return that.pi;\n      },\n      // Fit, Contain and Center\n      fit: function() {\n        that.fit();\n        return that.pi;\n      },\n      contain: function() {\n        that.contain();\n        return that.pi;\n      },\n      center: function() {\n        that.center();\n        return that.pi;\n      },\n      // Size and Resize\n      updateBBox: function() {\n        that.updateBBox();\n        return that.pi;\n      },\n      resize: function() {\n        that.resize();\n        return that.pi;\n      },\n      getSizes: function() {\n        return {\n          width: that.width,\n          height: that.height,\n          realZoom: that.getZoom(),\n          viewBox: that.viewport.getViewBox()\n        };\n      },\n      // Destroy\n      destroy: function() {\n        that.destroy();\n        return that.pi;\n      }\n    };\n  }\n\n  return this.publicInstance;\n};\n\n/**\n * Stores pairs of instances of SvgPanZoom and SVG\n * Each pair is represented by an object {svg: SVGSVGElement, instance: SvgPanZoom}\n *\n * @type {Array}\n */\nvar instancesStore = [];\n\nvar svgPanZoom = function(elementOrSelector, options) {\n  var svg = Utils.getSvg(elementOrSelector);\n\n  if (svg === null) {\n    return null;\n  } else {\n    // Look for existent instance\n    for (var i = instancesStore.length - 1; i >= 0; i--) {\n      if (instancesStore[i].svg === svg) {\n        return instancesStore[i].instance.getPublicInstance();\n      }\n    }\n\n    // If instance not found - create one\n    instancesStore.push({\n      svg: svg,\n      instance: new SvgPanZoom(svg, options)\n    });\n\n    // Return just pushed instance\n    return instancesStore[\n      instancesStore.length - 1\n    ].instance.getPublicInstance();\n  }\n};\n\nmodule.exports = svgPanZoom;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}