{"ast":null,"code":"var SvgUtils = require(\"./svg-utilities\"),\n  Utils = require(\"./utilities\");\nvar ShadowViewport = function (viewport, options) {\n  this.init(viewport, options);\n};\n\n/**\n * Initialization\n *\n * @param  {SVGElement} viewport\n * @param  {Object} options\n */\nShadowViewport.prototype.init = function (viewport, options) {\n  // DOM Elements\n  this.viewport = viewport;\n  this.options = options;\n\n  // State cache\n  this.originalState = {\n    zoom: 1,\n    x: 0,\n    y: 0\n  };\n  this.activeState = {\n    zoom: 1,\n    x: 0,\n    y: 0\n  };\n  this.updateCTMCached = Utils.proxy(this.updateCTM, this);\n\n  // Create a custom requestAnimationFrame taking in account refreshRate\n  this.requestAnimationFrame = Utils.createRequestAnimationFrame(this.options.refreshRate);\n\n  // ViewBox\n  this.viewBox = {\n    x: 0,\n    y: 0,\n    width: 0,\n    height: 0\n  };\n  this.cacheViewBox();\n\n  // Process CTM\n  var newCTM = this.processCTM();\n\n  // Update viewport CTM and cache zoom and pan\n  this.setCTM(newCTM);\n\n  // Update CTM in this frame\n  this.updateCTM();\n};\n\n/**\n * Cache initial viewBox value\n * If no viewBox is defined, then use viewport size/position instead for viewBox values\n */\nShadowViewport.prototype.cacheViewBox = function () {\n  var svgViewBox = this.options.svg.getAttribute(\"viewBox\");\n  if (svgViewBox) {\n    var viewBoxValues = svgViewBox.split(/[\\s\\,]/).filter(function (v) {\n      return v;\n    }).map(parseFloat);\n\n    // Cache viewbox x and y offset\n    this.viewBox.x = viewBoxValues[0];\n    this.viewBox.y = viewBoxValues[1];\n    this.viewBox.width = viewBoxValues[2];\n    this.viewBox.height = viewBoxValues[3];\n    var zoom = Math.min(this.options.width / this.viewBox.width, this.options.height / this.viewBox.height);\n\n    // Update active state\n    this.activeState.zoom = isFinite(zoom) ? zoom : 1;\n    this.activeState.x = (this.options.width - this.viewBox.width * zoom) / 2;\n    this.activeState.y = (this.options.height - this.viewBox.height * zoom) / 2;\n\n    // Force updating CTM\n    this.updateCTMOnNextFrame();\n    this.options.svg.removeAttribute(\"viewBox\");\n  } else {\n    this.simpleViewBoxCache();\n  }\n};\n\n/**\n * Recalculate viewport sizes and update viewBox cache\n */\nShadowViewport.prototype.simpleViewBoxCache = function () {\n  var bBox = this.viewport.getBBox();\n  this.viewBox.x = bBox.x;\n  this.viewBox.y = bBox.y;\n  this.viewBox.width = bBox.width;\n  this.viewBox.height = bBox.height;\n};\n\n/**\n * Returns a viewbox object. Safe to alter\n *\n * @return {Object} viewbox object\n */\nShadowViewport.prototype.getViewBox = function () {\n  return Utils.extend({}, this.viewBox);\n};\n\n/**\n * Get initial zoom and pan values. Save them into originalState\n * Parses viewBox attribute to alter initial sizes\n *\n * @return {CTM} CTM object based on options\n */\nShadowViewport.prototype.processCTM = function () {\n  var newCTM = this.getCTM();\n  if (this.options.fit || this.options.contain) {\n    var newScale;\n    if (this.options.fit) {\n      newScale = Math.min(this.options.width / this.viewBox.width, this.options.height / this.viewBox.height);\n    } else {\n      newScale = Math.max(this.options.width / this.viewBox.width, this.options.height / this.viewBox.height);\n    }\n    newScale = isFinite(newScale) ? newScale : 1;\n    newCTM.a = newScale; //x-scale\n    newCTM.d = newScale; //y-scale\n    newCTM.e = -this.viewBox.x * newScale; //x-transform\n    newCTM.f = -this.viewBox.y * newScale; //y-transform\n  }\n\n  if (this.options.center) {\n    var offsetX = (this.options.width - (this.viewBox.width + this.viewBox.x * 2) * newCTM.a) * 0.5,\n      offsetY = (this.options.height - (this.viewBox.height + this.viewBox.y * 2) * newCTM.a) * 0.5;\n    newCTM.e = offsetX;\n    newCTM.f = offsetY;\n  }\n\n  // Cache initial values. Based on activeState and fix+center opitons\n  this.originalState.zoom = newCTM.a;\n  this.originalState.x = newCTM.e;\n  this.originalState.y = newCTM.f;\n  return newCTM;\n};\n\n/**\n * Return originalState object. Safe to alter\n *\n * @return {Object}\n */\nShadowViewport.prototype.getOriginalState = function () {\n  return Utils.extend({}, this.originalState);\n};\n\n/**\n * Return actualState object. Safe to alter\n *\n * @return {Object}\n */\nShadowViewport.prototype.getState = function () {\n  return Utils.extend({}, this.activeState);\n};\n\n/**\n * Get zoom scale\n *\n * @return {Float} zoom scale\n */\nShadowViewport.prototype.getZoom = function () {\n  return this.activeState.zoom;\n};\n\n/**\n * Get zoom scale for pubilc usage\n *\n * @return {Float} zoom scale\n */\nShadowViewport.prototype.getRelativeZoom = function () {\n  return this.activeState.zoom / this.originalState.zoom;\n};\n\n/**\n * Compute zoom scale for pubilc usage\n *\n * @return {Float} zoom scale\n */\nShadowViewport.prototype.computeRelativeZoom = function (scale) {\n  return scale / this.originalState.zoom;\n};\n\n/**\n * Get pan\n *\n * @return {Object}\n */\nShadowViewport.prototype.getPan = function () {\n  return {\n    x: this.activeState.x,\n    y: this.activeState.y\n  };\n};\n\n/**\n * Return cached viewport CTM value that can be safely modified\n *\n * @return {SVGMatrix}\n */\nShadowViewport.prototype.getCTM = function () {\n  var safeCTM = this.options.svg.createSVGMatrix();\n\n  // Copy values manually as in FF they are not itterable\n  safeCTM.a = this.activeState.zoom;\n  safeCTM.b = 0;\n  safeCTM.c = 0;\n  safeCTM.d = this.activeState.zoom;\n  safeCTM.e = this.activeState.x;\n  safeCTM.f = this.activeState.y;\n  return safeCTM;\n};\n\n/**\n * Set a new CTM\n *\n * @param {SVGMatrix} newCTM\n */\nShadowViewport.prototype.setCTM = function (newCTM) {\n  var willZoom = this.isZoomDifferent(newCTM),\n    willPan = this.isPanDifferent(newCTM);\n  if (willZoom || willPan) {\n    // Before zoom\n    if (willZoom) {\n      // If returns false then cancel zooming\n      if (this.options.beforeZoom(this.getRelativeZoom(), this.computeRelativeZoom(newCTM.a)) === false) {\n        newCTM.a = newCTM.d = this.activeState.zoom;\n        willZoom = false;\n      } else {\n        this.updateCache(newCTM);\n        this.options.onZoom(this.getRelativeZoom());\n      }\n    }\n\n    // Before pan\n    if (willPan) {\n      var preventPan = this.options.beforePan(this.getPan(), {\n          x: newCTM.e,\n          y: newCTM.f\n        }),\n        // If prevent pan is an object\n        preventPanX = false,\n        preventPanY = false;\n\n      // If prevent pan is Boolean false\n      if (preventPan === false) {\n        // Set x and y same as before\n        newCTM.e = this.getPan().x;\n        newCTM.f = this.getPan().y;\n        preventPanX = preventPanY = true;\n      } else if (Utils.isObject(preventPan)) {\n        // Check for X axes attribute\n        if (preventPan.x === false) {\n          // Prevent panning on x axes\n          newCTM.e = this.getPan().x;\n          preventPanX = true;\n        } else if (Utils.isNumber(preventPan.x)) {\n          // Set a custom pan value\n          newCTM.e = preventPan.x;\n        }\n\n        // Check for Y axes attribute\n        if (preventPan.y === false) {\n          // Prevent panning on x axes\n          newCTM.f = this.getPan().y;\n          preventPanY = true;\n        } else if (Utils.isNumber(preventPan.y)) {\n          // Set a custom pan value\n          newCTM.f = preventPan.y;\n        }\n      }\n\n      // Update willPan flag\n      // Check if newCTM is still different\n      if (preventPanX && preventPanY || !this.isPanDifferent(newCTM)) {\n        willPan = false;\n      } else {\n        this.updateCache(newCTM);\n        this.options.onPan(this.getPan());\n      }\n    }\n\n    // Check again if should zoom or pan\n    if (willZoom || willPan) {\n      this.updateCTMOnNextFrame();\n    }\n  }\n};\nShadowViewport.prototype.isZoomDifferent = function (newCTM) {\n  return this.activeState.zoom !== newCTM.a;\n};\nShadowViewport.prototype.isPanDifferent = function (newCTM) {\n  return this.activeState.x !== newCTM.e || this.activeState.y !== newCTM.f;\n};\n\n/**\n * Update cached CTM and active state\n *\n * @param {SVGMatrix} newCTM\n */\nShadowViewport.prototype.updateCache = function (newCTM) {\n  this.activeState.zoom = newCTM.a;\n  this.activeState.x = newCTM.e;\n  this.activeState.y = newCTM.f;\n};\nShadowViewport.prototype.pendingUpdate = false;\n\n/**\n * Place a request to update CTM on next Frame\n */\nShadowViewport.prototype.updateCTMOnNextFrame = function () {\n  if (!this.pendingUpdate) {\n    // Lock\n    this.pendingUpdate = true;\n\n    // Throttle next update\n    this.requestAnimationFrame.call(window, this.updateCTMCached);\n  }\n};\n\n/**\n * Update viewport CTM with cached CTM\n */\nShadowViewport.prototype.updateCTM = function () {\n  var ctm = this.getCTM();\n\n  // Updates SVG element\n  SvgUtils.setCTM(this.viewport, ctm, this.defs);\n\n  // Free the lock\n  this.pendingUpdate = false;\n\n  // Notify about the update\n  if (this.options.onUpdatedCTM) {\n    this.options.onUpdatedCTM(ctm);\n  }\n};\nmodule.exports = function (viewport, options) {\n  return new ShadowViewport(viewport, options);\n};","map":{"version":3,"names":["SvgUtils","require","Utils","ShadowViewport","viewport","options","init","prototype","originalState","zoom","x","y","activeState","updateCTMCached","proxy","updateCTM","requestAnimationFrame","createRequestAnimationFrame","refreshRate","viewBox","width","height","cacheViewBox","newCTM","processCTM","setCTM","svgViewBox","svg","getAttribute","viewBoxValues","split","filter","v","map","parseFloat","Math","min","isFinite","updateCTMOnNextFrame","removeAttribute","simpleViewBoxCache","bBox","getBBox","getViewBox","extend","getCTM","fit","contain","newScale","max","a","d","e","f","center","offsetX","offsetY","getOriginalState","getState","getZoom","getRelativeZoom","computeRelativeZoom","scale","getPan","safeCTM","createSVGMatrix","b","c","willZoom","isZoomDifferent","willPan","isPanDifferent","beforeZoom","updateCache","onZoom","preventPan","beforePan","preventPanX","preventPanY","isObject","isNumber","onPan","pendingUpdate","call","window","ctm","defs","onUpdatedCTM","module","exports"],"sources":["/Users/arricodyanto/Dev/react-mapp/node_modules/@dash14/svg-pan-zoom/src/shadow-viewport.js"],"sourcesContent":["var SvgUtils = require(\"./svg-utilities\"),\n  Utils = require(\"./utilities\");\n\nvar ShadowViewport = function (viewport, options) {\n  this.init(viewport, options);\n};\n\n/**\n * Initialization\n *\n * @param  {SVGElement} viewport\n * @param  {Object} options\n */\nShadowViewport.prototype.init = function (viewport, options) {\n  // DOM Elements\n  this.viewport = viewport;\n  this.options = options;\n\n  // State cache\n  this.originalState = { zoom: 1, x: 0, y: 0 };\n  this.activeState = { zoom: 1, x: 0, y: 0 };\n\n  this.updateCTMCached = Utils.proxy(this.updateCTM, this);\n\n  // Create a custom requestAnimationFrame taking in account refreshRate\n  this.requestAnimationFrame = Utils.createRequestAnimationFrame(\n    this.options.refreshRate\n  );\n\n  // ViewBox\n  this.viewBox = { x: 0, y: 0, width: 0, height: 0 };\n  this.cacheViewBox();\n\n  // Process CTM\n  var newCTM = this.processCTM();\n\n  // Update viewport CTM and cache zoom and pan\n  this.setCTM(newCTM);\n\n  // Update CTM in this frame\n  this.updateCTM();\n};\n\n/**\n * Cache initial viewBox value\n * If no viewBox is defined, then use viewport size/position instead for viewBox values\n */\nShadowViewport.prototype.cacheViewBox = function () {\n  var svgViewBox = this.options.svg.getAttribute(\"viewBox\");\n\n  if (svgViewBox) {\n    var viewBoxValues = svgViewBox\n      .split(/[\\s\\,]/)\n      .filter(function (v) {\n        return v;\n      })\n      .map(parseFloat);\n\n    // Cache viewbox x and y offset\n    this.viewBox.x = viewBoxValues[0];\n    this.viewBox.y = viewBoxValues[1];\n    this.viewBox.width = viewBoxValues[2];\n    this.viewBox.height = viewBoxValues[3];\n\n    var zoom = Math.min(\n      this.options.width / this.viewBox.width,\n      this.options.height / this.viewBox.height\n    );\n\n    // Update active state\n    this.activeState.zoom = isFinite(zoom) ? zoom : 1;\n    this.activeState.x = (this.options.width - this.viewBox.width * zoom) / 2;\n    this.activeState.y = (this.options.height - this.viewBox.height * zoom) / 2;\n\n    // Force updating CTM\n    this.updateCTMOnNextFrame();\n\n    this.options.svg.removeAttribute(\"viewBox\");\n  } else {\n    this.simpleViewBoxCache();\n  }\n};\n\n/**\n * Recalculate viewport sizes and update viewBox cache\n */\nShadowViewport.prototype.simpleViewBoxCache = function () {\n  var bBox = this.viewport.getBBox();\n\n  this.viewBox.x = bBox.x;\n  this.viewBox.y = bBox.y;\n  this.viewBox.width = bBox.width;\n  this.viewBox.height = bBox.height;\n};\n\n/**\n * Returns a viewbox object. Safe to alter\n *\n * @return {Object} viewbox object\n */\nShadowViewport.prototype.getViewBox = function () {\n  return Utils.extend({}, this.viewBox);\n};\n\n/**\n * Get initial zoom and pan values. Save them into originalState\n * Parses viewBox attribute to alter initial sizes\n *\n * @return {CTM} CTM object based on options\n */\nShadowViewport.prototype.processCTM = function () {\n  var newCTM = this.getCTM();\n\n  if (this.options.fit || this.options.contain) {\n    var newScale;\n    if (this.options.fit) {\n      newScale = Math.min(\n        this.options.width / this.viewBox.width,\n        this.options.height / this.viewBox.height\n      );\n    } else {\n      newScale = Math.max(\n        this.options.width / this.viewBox.width,\n        this.options.height / this.viewBox.height\n      );\n    }\n\n    newScale = isFinite(newScale) ? newScale : 1;\n\n    newCTM.a = newScale; //x-scale\n    newCTM.d = newScale; //y-scale\n    newCTM.e = -this.viewBox.x * newScale; //x-transform\n    newCTM.f = -this.viewBox.y * newScale; //y-transform\n  }\n\n  if (this.options.center) {\n    var offsetX =\n        (this.options.width -\n          (this.viewBox.width + this.viewBox.x * 2) * newCTM.a) *\n        0.5,\n      offsetY =\n        (this.options.height -\n          (this.viewBox.height + this.viewBox.y * 2) * newCTM.a) *\n        0.5;\n\n    newCTM.e = offsetX;\n    newCTM.f = offsetY;\n  }\n\n  // Cache initial values. Based on activeState and fix+center opitons\n  this.originalState.zoom = newCTM.a;\n  this.originalState.x = newCTM.e;\n  this.originalState.y = newCTM.f;\n\n  return newCTM;\n};\n\n/**\n * Return originalState object. Safe to alter\n *\n * @return {Object}\n */\nShadowViewport.prototype.getOriginalState = function () {\n  return Utils.extend({}, this.originalState);\n};\n\n/**\n * Return actualState object. Safe to alter\n *\n * @return {Object}\n */\nShadowViewport.prototype.getState = function () {\n  return Utils.extend({}, this.activeState);\n};\n\n/**\n * Get zoom scale\n *\n * @return {Float} zoom scale\n */\nShadowViewport.prototype.getZoom = function () {\n  return this.activeState.zoom;\n};\n\n/**\n * Get zoom scale for pubilc usage\n *\n * @return {Float} zoom scale\n */\nShadowViewport.prototype.getRelativeZoom = function () {\n  return this.activeState.zoom / this.originalState.zoom;\n};\n\n/**\n * Compute zoom scale for pubilc usage\n *\n * @return {Float} zoom scale\n */\nShadowViewport.prototype.computeRelativeZoom = function (scale) {\n  return scale / this.originalState.zoom;\n};\n\n/**\n * Get pan\n *\n * @return {Object}\n */\nShadowViewport.prototype.getPan = function () {\n  return { x: this.activeState.x, y: this.activeState.y };\n};\n\n/**\n * Return cached viewport CTM value that can be safely modified\n *\n * @return {SVGMatrix}\n */\nShadowViewport.prototype.getCTM = function () {\n  var safeCTM = this.options.svg.createSVGMatrix();\n\n  // Copy values manually as in FF they are not itterable\n  safeCTM.a = this.activeState.zoom;\n  safeCTM.b = 0;\n  safeCTM.c = 0;\n  safeCTM.d = this.activeState.zoom;\n  safeCTM.e = this.activeState.x;\n  safeCTM.f = this.activeState.y;\n\n  return safeCTM;\n};\n\n/**\n * Set a new CTM\n *\n * @param {SVGMatrix} newCTM\n */\nShadowViewport.prototype.setCTM = function (newCTM) {\n  var willZoom = this.isZoomDifferent(newCTM),\n    willPan = this.isPanDifferent(newCTM);\n\n  if (willZoom || willPan) {\n    // Before zoom\n    if (willZoom) {\n      // If returns false then cancel zooming\n      if (\n        this.options.beforeZoom(\n          this.getRelativeZoom(),\n          this.computeRelativeZoom(newCTM.a)\n        ) === false\n      ) {\n        newCTM.a = newCTM.d = this.activeState.zoom;\n        willZoom = false;\n      } else {\n        this.updateCache(newCTM);\n        this.options.onZoom(this.getRelativeZoom());\n      }\n    }\n\n    // Before pan\n    if (willPan) {\n      var preventPan = this.options.beforePan(this.getPan(), {\n          x: newCTM.e,\n          y: newCTM.f,\n        }),\n        // If prevent pan is an object\n        preventPanX = false,\n        preventPanY = false;\n\n      // If prevent pan is Boolean false\n      if (preventPan === false) {\n        // Set x and y same as before\n        newCTM.e = this.getPan().x;\n        newCTM.f = this.getPan().y;\n\n        preventPanX = preventPanY = true;\n      } else if (Utils.isObject(preventPan)) {\n        // Check for X axes attribute\n        if (preventPan.x === false) {\n          // Prevent panning on x axes\n          newCTM.e = this.getPan().x;\n          preventPanX = true;\n        } else if (Utils.isNumber(preventPan.x)) {\n          // Set a custom pan value\n          newCTM.e = preventPan.x;\n        }\n\n        // Check for Y axes attribute\n        if (preventPan.y === false) {\n          // Prevent panning on x axes\n          newCTM.f = this.getPan().y;\n          preventPanY = true;\n        } else if (Utils.isNumber(preventPan.y)) {\n          // Set a custom pan value\n          newCTM.f = preventPan.y;\n        }\n      }\n\n      // Update willPan flag\n      // Check if newCTM is still different\n      if ((preventPanX && preventPanY) || !this.isPanDifferent(newCTM)) {\n        willPan = false;\n      } else {\n        this.updateCache(newCTM);\n        this.options.onPan(this.getPan());\n      }\n    }\n\n    // Check again if should zoom or pan\n    if (willZoom || willPan) {\n      this.updateCTMOnNextFrame();\n    }\n  }\n};\n\nShadowViewport.prototype.isZoomDifferent = function (newCTM) {\n  return this.activeState.zoom !== newCTM.a;\n};\n\nShadowViewport.prototype.isPanDifferent = function (newCTM) {\n  return this.activeState.x !== newCTM.e || this.activeState.y !== newCTM.f;\n};\n\n/**\n * Update cached CTM and active state\n *\n * @param {SVGMatrix} newCTM\n */\nShadowViewport.prototype.updateCache = function (newCTM) {\n  this.activeState.zoom = newCTM.a;\n  this.activeState.x = newCTM.e;\n  this.activeState.y = newCTM.f;\n};\n\nShadowViewport.prototype.pendingUpdate = false;\n\n/**\n * Place a request to update CTM on next Frame\n */\nShadowViewport.prototype.updateCTMOnNextFrame = function () {\n  if (!this.pendingUpdate) {\n    // Lock\n    this.pendingUpdate = true;\n\n    // Throttle next update\n    this.requestAnimationFrame.call(window, this.updateCTMCached);\n  }\n};\n\n/**\n * Update viewport CTM with cached CTM\n */\nShadowViewport.prototype.updateCTM = function () {\n  var ctm = this.getCTM();\n\n  // Updates SVG element\n  SvgUtils.setCTM(this.viewport, ctm, this.defs);\n\n  // Free the lock\n  this.pendingUpdate = false;\n\n  // Notify about the update\n  if (this.options.onUpdatedCTM) {\n    this.options.onUpdatedCTM(ctm);\n  }\n};\n\nmodule.exports = function (viewport, options) {\n  return new ShadowViewport(viewport, options);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}